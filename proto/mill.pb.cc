// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mill.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mill {

namespace {

const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Command_CommandType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CommandList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandReceived_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandReceived_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandComplete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandComplete_reflection_ = NULL;
const ::google::protobuf::Descriptor* MillState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MillState_reflection_ = NULL;
const ::google::protobuf::Descriptor* MillState_Axis_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MillState_Axis_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MillState_Axis_Direction_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mill_2eproto() {
  protobuf_AddDesc_mill_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mill.proto");
  GOOGLE_CHECK(file != NULL);
  Command_descriptor_ = file->message_type(0);
  static const int Command_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, j_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, k_),
  };
  Command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Command));
  Command_CommandType_descriptor_ = Command_descriptor_->enum_type(0);
  CommandList_descriptor_ = file->message_type(1);
  static const int CommandList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandList, command_),
  };
  CommandList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandList_descriptor_,
      CommandList::default_instance_,
      CommandList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandList));
  CommandReceived_descriptor_ = file->message_type(2);
  static const int CommandReceived_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReceived, number_),
  };
  CommandReceived_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandReceived_descriptor_,
      CommandReceived::default_instance_,
      CommandReceived_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReceived, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReceived, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandReceived));
  CommandComplete_descriptor_ = file->message_type(3);
  static const int CommandComplete_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandComplete, number_),
  };
  CommandComplete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandComplete_descriptor_,
      CommandComplete::default_instance_,
      CommandComplete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandComplete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandComplete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandComplete));
  MillState_descriptor_ = file->message_type(4);
  static const int MillState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillState, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillState, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillState, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillState, current_command_),
  };
  MillState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MillState_descriptor_,
      MillState::default_instance_,
      MillState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MillState));
  MillState_Axis_descriptor_ = MillState_descriptor_->nested_type(0);
  static const int MillState_Axis_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillState_Axis, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillState_Axis, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillState_Axis, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillState_Axis, acceleration_),
  };
  MillState_Axis_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MillState_Axis_descriptor_,
      MillState_Axis::default_instance_,
      MillState_Axis_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillState_Axis, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MillState_Axis, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MillState_Axis));
  MillState_Axis_Direction_descriptor_ = MillState_Axis_descriptor_->enum_type(0);
  Request_descriptor_ = file->message_type(5);
  static const int Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, command_list_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Response_descriptor_ = file->message_type(6);
  static const int Response_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, command_received_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, command_complete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, mill_state_),
  };
  Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mill_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Command_descriptor_, &Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandList_descriptor_, &CommandList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandReceived_descriptor_, &CommandReceived::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandComplete_descriptor_, &CommandComplete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MillState_descriptor_, &MillState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MillState_Axis_descriptor_, &MillState_Axis::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mill_2eproto() {
  delete Command::default_instance_;
  delete Command_reflection_;
  delete CommandList::default_instance_;
  delete CommandList_reflection_;
  delete CommandReceived::default_instance_;
  delete CommandReceived_reflection_;
  delete CommandComplete::default_instance_;
  delete CommandComplete_reflection_;
  delete MillState::default_instance_;
  delete MillState_reflection_;
  delete MillState_Axis::default_instance_;
  delete MillState_Axis_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
}

void protobuf_AddDesc_mill_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nmill.proto\022\004mill\"\347\001\n\007Command\022\'\n\004type\030\001"
    " \001(\0162\031.mill.Command.CommandType\022\t\n\001x\030\002 \001"
    "(\001\022\t\n\001y\030\003 \001(\001\022\t\n\001z\030\004 \001(\001\022\t\n\001v\030\005 \001(\001\022\t\n\001a"
    "\030\006 \001(\001\022\t\n\001i\030\007 \001(\001\022\t\n\001j\030\010 \001(\001\022\t\n\001k\030\t \001(\001\""
    "[\n\013CommandType\022\t\n\005PAUSE\020\000\022\010\n\004FEED\020\001\022\n\n\006F"
    "EEDTO\020\002\022\t\n\005RAPID\020\003\022\013\n\007RAPIDTO\020\004\022\t\n\005ARCTO"
    "\020\005\022\010\n\004ZERO\020\006\"-\n\013CommandList\022\036\n\007command\030\001"
    " \003(\0132\r.mill.Command\"!\n\017CommandReceived\022\016"
    "\n\006number\030\001 \001(\005\"!\n\017CommandComplete\022\016\n\006num"
    "ber\030\001 \001(\005\"\265\002\n\tMillState\022\037\n\001x\030\001 \001(\0132\024.mil"
    "l.MillState.Axis\022\037\n\001y\030\002 \001(\0132\024.mill.MillS"
    "tate.Axis\022\037\n\001z\030\003 \001(\0132\024.mill.MillState.Ax"
    "is\022&\n\017current_command\030\004 \001(\0132\r.mill.Comma"
    "nd\032\234\001\n\004Axis\0221\n\tdirection\030\001 \001(\0162\036.mill.Mi"
    "llState.Axis.Direction\022\020\n\010position\030\002 \001(\001"
    "\022\020\n\010velocity\030\003 \001(\001\022\024\n\014acceleration\030\004 \001(\001"
    "\"\'\n\tDirection\022\010\n\004IDLE\020\000\022\007\n\003POS\020\001\022\007\n\003NEG\020"
    "\001\"R\n\007Request\022\036\n\007command\030\001 \001(\0132\r.mill.Com"
    "mand\022\'\n\014command_list\030\002 \001(\0132\021.mill.Comman"
    "dList\"\221\001\n\010Response\022/\n\020command_received\030\001"
    " \001(\0132\025.mill.CommandReceived\022/\n\020command_c"
    "omplete\030\002 \001(\0132\025.mill.CommandComplete\022#\n\n"
    "mill_state\030\003 \001(\0132\017.mill.MillState", 913);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mill.proto", &protobuf_RegisterTypes);
  Command::default_instance_ = new Command();
  CommandList::default_instance_ = new CommandList();
  CommandReceived::default_instance_ = new CommandReceived();
  CommandComplete::default_instance_ = new CommandComplete();
  MillState::default_instance_ = new MillState();
  MillState_Axis::default_instance_ = new MillState_Axis();
  Request::default_instance_ = new Request();
  Response::default_instance_ = new Response();
  Command::default_instance_->InitAsDefaultInstance();
  CommandList::default_instance_->InitAsDefaultInstance();
  CommandReceived::default_instance_->InitAsDefaultInstance();
  CommandComplete::default_instance_->InitAsDefaultInstance();
  MillState::default_instance_->InitAsDefaultInstance();
  MillState_Axis::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mill_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mill_2eproto {
  StaticDescriptorInitializer_mill_2eproto() {
    protobuf_AddDesc_mill_2eproto();
  }
} static_descriptor_initializer_mill_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Command_CommandType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_CommandType_descriptor_;
}
bool Command_CommandType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Command_CommandType Command::PAUSE;
const Command_CommandType Command::FEED;
const Command_CommandType Command::FEEDTO;
const Command_CommandType Command::RAPID;
const Command_CommandType Command::RAPIDTO;
const Command_CommandType Command::ARCTO;
const Command_CommandType Command::ZERO;
const Command_CommandType Command::CommandType_MIN;
const Command_CommandType Command::CommandType_MAX;
const int Command::CommandType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Command::kTypeFieldNumber;
const int Command::kXFieldNumber;
const int Command::kYFieldNumber;
const int Command::kZFieldNumber;
const int Command::kVFieldNumber;
const int Command::kAFieldNumber;
const int Command::kIFieldNumber;
const int Command::kJFieldNumber;
const int Command::kKFieldNumber;
#endif  // !_MSC_VER

Command::Command()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Command::InitAsDefaultInstance() {
}

Command::Command(const Command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Command::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  v_ = 0;
  a_ = 0;
  i_ = 0;
  j_ = 0;
  k_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Command::~Command() {
  SharedDtor();
}

void Command::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mill_2eproto();  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New() const {
  return new Command;
}

void Command::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    x_ = 0;
    y_ = 0;
    z_ = 0;
    v_ = 0;
    a_ = 0;
    i_ = 0;
    j_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    k_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mill.Command.CommandType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mill::Command_CommandType_IsValid(value)) {
            set_type(static_cast< ::mill::Command_CommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_x;
        break;
      }
      
      // optional double x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_y;
        break;
      }
      
      // optional double y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_z;
        break;
      }
      
      // optional double z = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_v;
        break;
      }
      
      // optional double v = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_a;
        break;
      }
      
      // optional double a = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_i;
        break;
      }
      
      // optional double i = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_i:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &i_)));
          set_has_i();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_j;
        break;
      }
      
      // optional double j = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_j:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &j_)));
          set_has_j();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_k;
        break;
      }
      
      // optional double k = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k_)));
          set_has_k();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .mill.Command.CommandType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional double x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x(), output);
  }
  
  // optional double y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->y(), output);
  }
  
  // optional double z = 4;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->z(), output);
  }
  
  // optional double v = 5;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->v(), output);
  }
  
  // optional double a = 6;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->a(), output);
  }
  
  // optional double i = 7;
  if (has_i()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->i(), output);
  }
  
  // optional double j = 8;
  if (has_j()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->j(), output);
  }
  
  // optional double k = 9;
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->k(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .mill.Command.CommandType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional double x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x(), target);
  }
  
  // optional double y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->y(), target);
  }
  
  // optional double z = 4;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->z(), target);
  }
  
  // optional double v = 5;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->v(), target);
  }
  
  // optional double a = 6;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->a(), target);
  }
  
  // optional double i = 7;
  if (has_i()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->i(), target);
  }
  
  // optional double j = 8;
  if (has_j()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->j(), target);
  }
  
  // optional double k = 9;
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->k(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Command::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mill.Command.CommandType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional double x = 2;
    if (has_x()) {
      total_size += 1 + 8;
    }
    
    // optional double y = 3;
    if (has_y()) {
      total_size += 1 + 8;
    }
    
    // optional double z = 4;
    if (has_z()) {
      total_size += 1 + 8;
    }
    
    // optional double v = 5;
    if (has_v()) {
      total_size += 1 + 8;
    }
    
    // optional double a = 6;
    if (has_a()) {
      total_size += 1 + 8;
    }
    
    // optional double i = 7;
    if (has_i()) {
      total_size += 1 + 8;
    }
    
    // optional double j = 8;
    if (has_j()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double k = 9;
    if (has_k()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_i()) {
      set_i(from.i());
    }
    if (from.has_j()) {
      set_j(from.j());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_k()) {
      set_k(from.k());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  
  return true;
}

void Command::Swap(Command* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(v_, other->v_);
    std::swap(a_, other->a_);
    std::swap(i_, other->i_);
    std::swap(j_, other->j_);
    std::swap(k_, other->k_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandList::kCommandFieldNumber;
#endif  // !_MSC_VER

CommandList::CommandList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandList::InitAsDefaultInstance() {
}

CommandList::CommandList(const CommandList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandList::~CommandList() {
  SharedDtor();
}

void CommandList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommandList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandList_descriptor_;
}

const CommandList& CommandList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mill_2eproto();  return *default_instance_;
}

CommandList* CommandList::default_instance_ = NULL;

CommandList* CommandList::New() const {
  return new CommandList;
}

void CommandList::Clear() {
  command_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mill.Command command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_command;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .mill.Command command = 1;
  for (int i = 0; i < this->command_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->command(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .mill.Command command = 1;
  for (int i = 0; i < this->command_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->command(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandList::ByteSize() const {
  int total_size = 0;
  
  // repeated .mill.Command command = 1;
  total_size += 1 * this->command_size();
  for (int i = 0; i < this->command_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->command(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandList::MergeFrom(const CommandList& from) {
  GOOGLE_CHECK_NE(&from, this);
  command_.MergeFrom(from.command_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandList::CopyFrom(const CommandList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandList::IsInitialized() const {
  
  return true;
}

void CommandList::Swap(CommandList* other) {
  if (other != this) {
    command_.Swap(&other->command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandList_descriptor_;
  metadata.reflection = CommandList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandReceived::kNumberFieldNumber;
#endif  // !_MSC_VER

CommandReceived::CommandReceived()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandReceived::InitAsDefaultInstance() {
}

CommandReceived::CommandReceived(const CommandReceived& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandReceived::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandReceived::~CommandReceived() {
  SharedDtor();
}

void CommandReceived::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommandReceived::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandReceived::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandReceived_descriptor_;
}

const CommandReceived& CommandReceived::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mill_2eproto();  return *default_instance_;
}

CommandReceived* CommandReceived::default_instance_ = NULL;

CommandReceived* CommandReceived::New() const {
  return new CommandReceived;
}

void CommandReceived::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandReceived::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandReceived::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandReceived::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->number(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandReceived::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandReceived::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandReceived* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandReceived*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandReceived::MergeFrom(const CommandReceived& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandReceived::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandReceived::CopyFrom(const CommandReceived& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReceived::IsInitialized() const {
  
  return true;
}

void CommandReceived::Swap(CommandReceived* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandReceived::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandReceived_descriptor_;
  metadata.reflection = CommandReceived_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandComplete::kNumberFieldNumber;
#endif  // !_MSC_VER

CommandComplete::CommandComplete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandComplete::InitAsDefaultInstance() {
}

CommandComplete::CommandComplete(const CommandComplete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandComplete::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandComplete::~CommandComplete() {
  SharedDtor();
}

void CommandComplete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommandComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandComplete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandComplete_descriptor_;
}

const CommandComplete& CommandComplete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mill_2eproto();  return *default_instance_;
}

CommandComplete* CommandComplete::default_instance_ = NULL;

CommandComplete* CommandComplete::New() const {
  return new CommandComplete;
}

void CommandComplete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandComplete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->number(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandComplete::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandComplete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandComplete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandComplete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandComplete::MergeFrom(const CommandComplete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandComplete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandComplete::CopyFrom(const CommandComplete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandComplete::IsInitialized() const {
  
  return true;
}

void CommandComplete::Swap(CommandComplete* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandComplete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandComplete_descriptor_;
  metadata.reflection = CommandComplete_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MillState_Axis_Direction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MillState_Axis_Direction_descriptor_;
}
bool MillState_Axis_Direction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MillState_Axis_Direction MillState_Axis::IDLE;
const MillState_Axis_Direction MillState_Axis::POS;
const MillState_Axis_Direction MillState_Axis::NEG;
const MillState_Axis_Direction MillState_Axis::Direction_MIN;
const MillState_Axis_Direction MillState_Axis::Direction_MAX;
const int MillState_Axis::Direction_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MillState_Axis::kDirectionFieldNumber;
const int MillState_Axis::kPositionFieldNumber;
const int MillState_Axis::kVelocityFieldNumber;
const int MillState_Axis::kAccelerationFieldNumber;
#endif  // !_MSC_VER

MillState_Axis::MillState_Axis()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MillState_Axis::InitAsDefaultInstance() {
}

MillState_Axis::MillState_Axis(const MillState_Axis& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MillState_Axis::SharedCtor() {
  _cached_size_ = 0;
  direction_ = 0;
  position_ = 0;
  velocity_ = 0;
  acceleration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MillState_Axis::~MillState_Axis() {
  SharedDtor();
}

void MillState_Axis::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MillState_Axis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MillState_Axis::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MillState_Axis_descriptor_;
}

const MillState_Axis& MillState_Axis::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mill_2eproto();  return *default_instance_;
}

MillState_Axis* MillState_Axis::default_instance_ = NULL;

MillState_Axis* MillState_Axis::New() const {
  return new MillState_Axis;
}

void MillState_Axis::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    direction_ = 0;
    position_ = 0;
    velocity_ = 0;
    acceleration_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MillState_Axis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mill.MillState.Axis.Direction direction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mill::MillState_Axis_Direction_IsValid(value)) {
            set_direction(static_cast< ::mill::MillState_Axis_Direction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_position;
        break;
      }
      
      // optional double position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_velocity;
        break;
      }
      
      // optional double velocity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_)));
          set_has_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_acceleration;
        break;
      }
      
      // optional double acceleration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_acceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_)));
          set_has_acceleration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MillState_Axis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .mill.MillState.Axis.Direction direction = 1;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->direction(), output);
  }
  
  // optional double position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->position(), output);
  }
  
  // optional double velocity = 3;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->velocity(), output);
  }
  
  // optional double acceleration = 4;
  if (has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->acceleration(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MillState_Axis::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .mill.MillState.Axis.Direction direction = 1;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->direction(), target);
  }
  
  // optional double position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->position(), target);
  }
  
  // optional double velocity = 3;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->velocity(), target);
  }
  
  // optional double acceleration = 4;
  if (has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->acceleration(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MillState_Axis::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mill.MillState.Axis.Direction direction = 1;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }
    
    // optional double position = 2;
    if (has_position()) {
      total_size += 1 + 8;
    }
    
    // optional double velocity = 3;
    if (has_velocity()) {
      total_size += 1 + 8;
    }
    
    // optional double acceleration = 4;
    if (has_acceleration()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MillState_Axis::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MillState_Axis* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MillState_Axis*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MillState_Axis::MergeFrom(const MillState_Axis& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_velocity()) {
      set_velocity(from.velocity());
    }
    if (from.has_acceleration()) {
      set_acceleration(from.acceleration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MillState_Axis::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MillState_Axis::CopyFrom(const MillState_Axis& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MillState_Axis::IsInitialized() const {
  
  return true;
}

void MillState_Axis::Swap(MillState_Axis* other) {
  if (other != this) {
    std::swap(direction_, other->direction_);
    std::swap(position_, other->position_);
    std::swap(velocity_, other->velocity_);
    std::swap(acceleration_, other->acceleration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MillState_Axis::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MillState_Axis_descriptor_;
  metadata.reflection = MillState_Axis_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MillState::kXFieldNumber;
const int MillState::kYFieldNumber;
const int MillState::kZFieldNumber;
const int MillState::kCurrentCommandFieldNumber;
#endif  // !_MSC_VER

MillState::MillState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MillState::InitAsDefaultInstance() {
  x_ = const_cast< ::mill::MillState_Axis*>(&::mill::MillState_Axis::default_instance());
  y_ = const_cast< ::mill::MillState_Axis*>(&::mill::MillState_Axis::default_instance());
  z_ = const_cast< ::mill::MillState_Axis*>(&::mill::MillState_Axis::default_instance());
  current_command_ = const_cast< ::mill::Command*>(&::mill::Command::default_instance());
}

MillState::MillState(const MillState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MillState::SharedCtor() {
  _cached_size_ = 0;
  x_ = NULL;
  y_ = NULL;
  z_ = NULL;
  current_command_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MillState::~MillState() {
  SharedDtor();
}

void MillState::SharedDtor() {
  if (this != default_instance_) {
    delete x_;
    delete y_;
    delete z_;
    delete current_command_;
  }
}

void MillState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MillState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MillState_descriptor_;
}

const MillState& MillState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mill_2eproto();  return *default_instance_;
}

MillState* MillState::default_instance_ = NULL;

MillState* MillState::New() const {
  return new MillState;
}

void MillState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_x()) {
      if (x_ != NULL) x_->::mill::MillState_Axis::Clear();
    }
    if (has_y()) {
      if (y_ != NULL) y_->::mill::MillState_Axis::Clear();
    }
    if (has_z()) {
      if (z_ != NULL) z_->::mill::MillState_Axis::Clear();
    }
    if (has_current_command()) {
      if (current_command_ != NULL) current_command_->::mill::Command::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MillState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mill.MillState.Axis x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_y;
        break;
      }
      
      // optional .mill.MillState.Axis y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_y:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_y()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_z;
        break;
      }
      
      // optional .mill.MillState.Axis z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_z:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_z()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_current_command;
        break;
      }
      
      // optional .mill.Command current_command = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_current_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_current_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MillState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .mill.MillState.Axis x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->x(), output);
  }
  
  // optional .mill.MillState.Axis y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->y(), output);
  }
  
  // optional .mill.MillState.Axis z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->z(), output);
  }
  
  // optional .mill.Command current_command = 4;
  if (has_current_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->current_command(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MillState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .mill.MillState.Axis x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->x(), target);
  }
  
  // optional .mill.MillState.Axis y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->y(), target);
  }
  
  // optional .mill.MillState.Axis z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->z(), target);
  }
  
  // optional .mill.Command current_command = 4;
  if (has_current_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->current_command(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MillState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mill.MillState.Axis x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x());
    }
    
    // optional .mill.MillState.Axis y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->y());
    }
    
    // optional .mill.MillState.Axis z = 3;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->z());
    }
    
    // optional .mill.Command current_command = 4;
    if (has_current_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->current_command());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MillState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MillState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MillState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MillState::MergeFrom(const MillState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      mutable_x()->::mill::MillState_Axis::MergeFrom(from.x());
    }
    if (from.has_y()) {
      mutable_y()->::mill::MillState_Axis::MergeFrom(from.y());
    }
    if (from.has_z()) {
      mutable_z()->::mill::MillState_Axis::MergeFrom(from.z());
    }
    if (from.has_current_command()) {
      mutable_current_command()->::mill::Command::MergeFrom(from.current_command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MillState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MillState::CopyFrom(const MillState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MillState::IsInitialized() const {
  
  return true;
}

void MillState::Swap(MillState* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(current_command_, other->current_command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MillState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MillState_descriptor_;
  metadata.reflection = MillState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Request::kCommandFieldNumber;
const int Request::kCommandListFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Request::InitAsDefaultInstance() {
  command_ = const_cast< ::mill::Command*>(&::mill::Command::default_instance());
  command_list_ = const_cast< ::mill::CommandList*>(&::mill::CommandList::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  command_ = NULL;
  command_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != default_instance_) {
    delete command_;
    delete command_list_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mill_2eproto();  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_command()) {
      if (command_ != NULL) command_->::mill::Command::Clear();
    }
    if (has_command_list()) {
      if (command_list_ != NULL) command_list_->::mill::CommandList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mill.Command command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_command_list;
        break;
      }
      
      // optional .mill.CommandList command_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .mill.Command command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->command(), output);
  }
  
  // optional .mill.CommandList command_list = 2;
  if (has_command_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->command_list(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .mill.Command command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->command(), target);
  }
  
  // optional .mill.CommandList command_list = 2;
  if (has_command_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->command_list(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mill.Command command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command());
    }
    
    // optional .mill.CommandList command_list = 2;
    if (has_command_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command_list());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      mutable_command()->::mill::Command::MergeFrom(from.command());
    }
    if (from.has_command_list()) {
      mutable_command_list()->::mill::CommandList::MergeFrom(from.command_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  
  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(command_list_, other->command_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Response::kCommandReceivedFieldNumber;
const int Response::kCommandCompleteFieldNumber;
const int Response::kMillStateFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Response::InitAsDefaultInstance() {
  command_received_ = const_cast< ::mill::CommandReceived*>(&::mill::CommandReceived::default_instance());
  command_complete_ = const_cast< ::mill::CommandComplete*>(&::mill::CommandComplete::default_instance());
  mill_state_ = const_cast< ::mill::MillState*>(&::mill::MillState::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  command_received_ = NULL;
  command_complete_ = NULL;
  mill_state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != default_instance_) {
    delete command_received_;
    delete command_complete_;
    delete mill_state_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mill_2eproto();  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_command_received()) {
      if (command_received_ != NULL) command_received_->::mill::CommandReceived::Clear();
    }
    if (has_command_complete()) {
      if (command_complete_ != NULL) command_complete_->::mill::CommandComplete::Clear();
    }
    if (has_mill_state()) {
      if (mill_state_ != NULL) mill_state_->::mill::MillState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mill.CommandReceived command_received = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command_received()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_command_complete;
        break;
      }
      
      // optional .mill.CommandComplete command_complete = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command_complete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command_complete()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mill_state;
        break;
      }
      
      // optional .mill.MillState mill_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mill_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mill_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .mill.CommandReceived command_received = 1;
  if (has_command_received()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->command_received(), output);
  }
  
  // optional .mill.CommandComplete command_complete = 2;
  if (has_command_complete()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->command_complete(), output);
  }
  
  // optional .mill.MillState mill_state = 3;
  if (has_mill_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mill_state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .mill.CommandReceived command_received = 1;
  if (has_command_received()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->command_received(), target);
  }
  
  // optional .mill.CommandComplete command_complete = 2;
  if (has_command_complete()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->command_complete(), target);
  }
  
  // optional .mill.MillState mill_state = 3;
  if (has_mill_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mill_state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mill.CommandReceived command_received = 1;
    if (has_command_received()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command_received());
    }
    
    // optional .mill.CommandComplete command_complete = 2;
    if (has_command_complete()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command_complete());
    }
    
    // optional .mill.MillState mill_state = 3;
    if (has_mill_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mill_state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command_received()) {
      mutable_command_received()->::mill::CommandReceived::MergeFrom(from.command_received());
    }
    if (from.has_command_complete()) {
      mutable_command_complete()->::mill::CommandComplete::MergeFrom(from.command_complete());
    }
    if (from.has_mill_state()) {
      mutable_mill_state()->::mill::MillState::MergeFrom(from.mill_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  
  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(command_received_, other->command_received_);
    std::swap(command_complete_, other->command_complete_);
    std::swap(mill_state_, other->mill_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mill

// @@protoc_insertion_point(global_scope)
